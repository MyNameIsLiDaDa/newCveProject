{
    "Code": 0,
    "Data": [
        {
            "id": 1,
            "CWE_ID": 5,
            "Name": "J2EE Misconfiguration: Data Transmission Without Encryption",
            "Weakness_Abstraction": "Variant",
            "Status": "Draft",
            "Description": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.",
            "Extended_Description": null,
            "Related_Weaknesses": "::NATURE:ChildOf:CWE ID:319:VIEW ID:1000:ORDINAL:Primary::",
            "Weakness_Ordinalities": null,
            "Applicable_Platforms": "::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::",
            "Background_Details": null,
            "Alternate_Terms": null,
            "Modes_Of_Introduction": "::PHASE:Implementation::PHASE:Operation::",
            "Exploitation_Factors": null,
            "Likelihood_of_Exploit": null,
            "Common_Consequences": "::SCOPE:Confidentiality:IMPACT:Read Application Data::SCOPE:Integrity:IMPACT:Modify Application Data::",
            "Detection_Methods": null,
            "Potential_Mitigations": "::PHASE:System Configuration:DESCRIPTION:The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.::",
            "Observed_Examples": null,
            "Functional_Areas": null,
            "Affected_Resources": null,
            "Taxonomy_Mappings": "::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insecure Transport::",
            "Related_Attack_Patterns": null,
            "Notes": "::TYPE:Other:NOTE:If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access controlled page without SSL. There are three common ways for SSL to be bypassed: A user manually enters URL and types HTTP rather than HTTPS. Attackers intentionally send a user to an insecure URL. A programmer erroneously creates a relative link to a page in the application, which does not switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)::"
        },
        {
            "id": 2,
            "CWE_ID": 6,
            "Name": "J2EE Misconfiguration: Insufficient Session-ID Length",
            "Weakness_Abstraction": "Variant",
            "Status": "Incomplete",
            "Description": "The J2EE application is configured to use an insufficient session ID length.",
            "Extended_Description": "If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",
            "Related_Weaknesses": "::NATURE:ChildOf:CWE ID:334:VIEW ID:1000:ORDINAL:Primary::",
            "Weakness_Ordinalities": null,
            "Applicable_Platforms": "::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::",
            "Background_Details": "::Session ID's can be used to identify communicating parties in a web environment. The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.::",
            "Alternate_Terms": null,
            "Modes_Of_Introduction": "::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::PHASE:Implementation::",
            "Exploitation_Factors": null,
            "Likelihood_of_Exploit": null,
            "Common_Consequences": "::SCOPE:Access Control:IMPACT:Gain Privileges or Assume Identity:NOTE:If an attacker can guess an authenticated user's session identifier, they can take over the user's session.::",
            "Detection_Methods": null,
            "Potential_Mitigations": "::PHASE:Implementation:DESCRIPTION:Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.::PHASE:Implementation:DESCRIPTION:A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.::",
            "Observed_Examples": null,
            "Functional_Areas": null,
            "Affected_Resources": null,
            "Taxonomy_Mappings": "::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Insufficient Session-ID Length::",
            "Related_Attack_Patterns": "::21::59::",
            "Notes": null
        },
        {
            "id": 3,
            "CWE_ID": 7,
            "Name": "J2EE Misconfiguration: Missing Custom Error Page",
            "Weakness_Abstraction": "Variant",
            "Status": "Incomplete",
            "Description": "The default error page of a web application should not display sensitive information about the software system.",
            "Extended_Description": "A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.",
            "Related_Weaknesses": "::NATURE:ChildOf:CWE ID:756:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:756:VIEW ID:699:ORDINAL:Primary::",
            "Weakness_Ordinalities": null,
            "Applicable_Platforms": "::LANGUAGE NAME:Java:LANGUAGE PREVALENCE:Undetermined::",
            "Background_Details": null,
            "Alternate_Terms": null,
            "Modes_Of_Introduction": "::PHASE:Architecture and Design::PHASE:Implementation::",
            "Exploitation_Factors": null,
            "Likelihood_of_Exploit": null,
            "Common_Consequences": "::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.::",
            "Detection_Methods": null,
            "Potential_Mitigations": "::PHASE:Implementation:DESCRIPTION:Handle exceptions appropriately in source code.::PHASE:Implementation System Configuration:DESCRIPTION:Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.::PHASE:Implementation:DESCRIPTION:Do not attempt to process an error or attempt to mask it.::PHASE:Implementation:DESCRIPTION:Verify return values are correct and do not supply sensitive information about the system.::",
            "Observed_Examples": null,
            "Functional_Areas": null,
            "Affected_Resources": null,
            "Taxonomy_Mappings": "::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Missing Error Handling::",
            "Related_Attack_Patterns": null,
            "Notes": null
        },
        {
            "id": 4,
            "CWE_ID": 8,
            "Name": "J2EE Misconfiguration: Entity Bean Declared Remote",
            "Weakness_Abstraction": "Variant",
            "Status": "Incomplete",
            "Description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",
            "Extended_Description": null,
            "Related_Weaknesses": "::NATURE:ChildOf:CWE ID:668:VIEW ID:1000:ORDINAL:Primary::",
            "Weakness_Ordinalities": null,
            "Applicable_Platforms": null,
            "Background_Details": null,
            "Alternate_Terms": null,
            "Modes_Of_Introduction": "::PHASE:Architecture and Design::PHASE:Implementation::",
            "Exploitation_Factors": null,
            "Likelihood_of_Exploit": null,
            "Common_Consequences": "::SCOPE:Confidentiality:SCOPE:Integrity:IMPACT:Read Application Data:IMPACT:Modify Application Data::",
            "Detection_Methods": null,
            "Potential_Mitigations": "::PHASE:Implementation:DESCRIPTION:Declare Java beans local when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.::",
            "Observed_Examples": null,
            "Functional_Areas": null,
            "Affected_Resources": null,
            "Taxonomy_Mappings": "::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Unsafe Bean Declaration::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP23:ENTRY NAME:Exposed Data::",
            "Related_Attack_Patterns": null,
            "Notes": "::TYPE:Other:NOTE:Entity beans that expose a remote interface become part of an application's attack surface. For performance reasons, an application should rarely use remote entity beans, so there is a good chance that a remote entity bean declaration is an error.::"
        },
        {
            "id": 5,
            "CWE_ID": 9,
            "Name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
            "Weakness_Abstraction": "Variant",
            "Status": "Draft",
            "Description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system.",
            "Extended_Description": "If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.",
            "Related_Weaknesses": "::NATURE:ChildOf:CWE ID:266:VIEW ID:1000:ORDINAL:Primary::",
            "Weakness_Ordinalities": null,
            "Applicable_Platforms": null,
            "Background_Details": null,
            "Alternate_Terms": null,
            "Modes_Of_Introduction": "::PHASE:Architecture and Design::PHASE:Implementation::",
            "Exploitation_Factors": null,
            "Likelihood_of_Exploit": null,
            "Common_Consequences": "::SCOPE:Other:IMPACT:Other::",
            "Detection_Methods": null,
            "Potential_Mitigations": "::PHASE:Architecture and Design System Configuration:DESCRIPTION:Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.::",
            "Observed_Examples": null,
            "Functional_Areas": null,
            "Affected_Resources": null,
            "Taxonomy_Mappings": "::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:J2EE Misconfiguration: Weak Access Permissions::",
            "Related_Attack_Patterns": null,
            "Notes": null
        }
    ]
}